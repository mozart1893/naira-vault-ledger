# Alternative Dockerfile for ARM64 compatibility
FROM node:18-alpine AS base

# Install dependencies only when needed
FROM base AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Copy package files
COPY package.json package-lock.json* ./
RUN npm ci --only=production

# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app

# Copy package files and install dependencies fresh
COPY package.json package-lock.json* ./
RUN npm install --no-optional --no-audit --no-fund

# Copy source code
COPY . .

# Set environment variables for build
ENV NODE_ENV=production
ENV VITE_BUILD_TARGET=production

# Build the application with explicit architecture handling
RUN npm run build

# Production image
FROM nginx:alpine AS runner
WORKDIR /usr/share/nginx/html

# Copy built assets
COPY --from=builder /app/dist .

# Copy nginx configuration
COPY nginx.conf /etc/nginx/nginx.conf

# Expose port
EXPOSE 80

# Start nginx
CMD ["nginx", "-g", "daemon off;"]
